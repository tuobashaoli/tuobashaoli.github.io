---
categories: blog
date: '2022-03-26 15:29:18'
description: it is so pythonic
layout: post
published: True
title: "python字典源码解读"
tags: pythonic
---

# 定义

字典结构体的定义在文件`Include/cpython/dictobject.h`

具体内容：

```
typedef struct {
    PyObject_HEAD

    /* Number of items in the dictionary */
    Py_ssize_t ma_used; //字典中的元素个数

    /* Dictionary version: globally unique, value change each time
       the dictionary is modified */
    uint64_t ma_version_tag;//字典版本号，每次字典有变更，这个值也会变更

    PyDictKeysObject *ma_keys; //指针，指向存储的键值对

    /* If ma_values is NULL, the table is "combined": keys and values
       are stored in ma_keys.

       If ma_values is not NULL, the table is splitted:
       keys are stored in ma_keys and values are stored in ma_values */
    PyObject **ma_values; //指向指针的指针，如果为空，则key和value都是存储在ma_keys,否则，key存放在ma_keys,value存放在ma_values，一般创建的字典都是联合表字典combined-table，分离表字典split-table字典用于__dict__属性，它们的键表被缓存在类型属性中，并允许所有该类型的实例共享值。
} PyDictObject;
```

而存储键值对的结构，PyDictKeysObject，即`_dictkeysobject`，定义在`Objects/dict-common.h`中

```
struct _dictkeysobject {
    Py_ssize_t dk_refcnt; //引用计数

    /* Size of the hash table (dk_indices). It must be a power of 2. */
    Py_ssize_t dk_size; // 容量，是2的倍数，这样在寻址的时候，可以用异或

    /* Function to lookup in the hash table (dk_indices):

       - lookdict(): general-purpose, and may return DKIX_ERROR if (and
         only if) a comparison raises an exception.

       - lookdict_unicode(): specialized to Unicode string keys, comparison of
         which can never raise an exception; that function can never return
         DKIX_ERROR.

       - lookdict_unicode_nodummy(): similar to lookdict_unicode() but further
         specialized for Unicode string keys that cannot be the <dummy> value.

       - lookdict_split(): Version of lookdict() for split tables. */
    dict_lookup_func dk_lookup; // hash查找函数

    /* Number of usable entries in dk_entries. */
    Py_ssize_t dk_usable; // 可使用的entry

    /* Number of used entries in dk_entries. */
    Py_ssize_t dk_nentries; //已使用的entry

    /* Actual hash table of dk_size entries. It holds indices in dk_entries,
       or DKIX_EMPTY(-1) or DKIX_DUMMY(-2).

       Indices must be: 0 <= indice < USABLE_FRACTION(dk_size).

       The size in bytes of an indice depends on dk_size:

       - 1 byte if dk_size <= 0xff (char*)
       - 2 bytes if dk_size <= 0xffff (int16_t*)
       - 4 bytes if dk_size <= 0xffffffff (int32_t*)
       - 8 bytes otherwise (int64_t*)

       Dynamically sized, SIZEOF_VOID_P is minimum. */
    char dk_indices[];  /* char is required to avoid strict aliasing. */
    //存入的entries，元素类型是PyDictKeyEntry
    /* "PyDictKeyEntry dk_entries[dk_usable];" array follows:
       see the DK_ENTRIES() macro */
};
```

```

typedef struct {
    /* Cached hash code of me_key. */
    Py_hash_t me_hash; //存储me_key的hash值
    PyObject *me_key; //键
    PyObject *me_value; /* This field is only meaningful for combined tables */ //值
} PyDictKeyEntry;
```


内存结构图如下

![avatar](/assets/images/python_dict.png)


# hash冲突

当某俩个不同的key，计算的hash一样的时候，就产生了hash冲突。
产生hash冲突的时候，就需要解决冲突，一般有以下的思路

1.用某种方法再找个地址，直到没有冲突，这个思路下有以下方法
  a.将key用其他方式再hash
  b.查找这个地址之前/之后的可用地址
  以上新增时可能会增加时间，比如出发扩容和多次查找会很耗时，但是访问速度快，可以序列化
2.将这些冲突的key，额外存储下
  a.用一个链表/红黑树存储这些key，适合经常插入和删除，访问的时间可能会增加
  b.建立公共益处区，专门存储冲突的key

